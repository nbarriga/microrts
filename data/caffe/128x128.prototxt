name: "RTSNet"
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param { shape: { dim:1 dim:25  dim:128 dim:128 } }
}
#----------------- conv 1 ------------------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 2 ------------------
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
  relu_param {
    negative_slope: 0.1818
  }
}
# #----------------- conv 3 ------------------
# layer {
#   name: "conv3"
#   type: "Convolution"
#   bottom: "conv2"
#   top: "conv3"
#   # learning rate & decay multipliers for the filters
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   # learning rate & decay multipliers for the biases
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 32
#     kernel_size: 3
#     pad: 1
#     stride: 1
#     weight_filler {
#       # type: "gaussian"
#       # std: 0.01
#       type: "xavier"
#     }
#     bias_filler {
#       type: "constant"
#       value: 0
#     }
#   }
# }
# layer {
#   name: "relu3"
#   type: "ReLU"
#   bottom: "conv3"
#   top: "conv3"
#   relu_param {
#     negative_slope: 0.1818
#   }
# }
# #----------------- conv 4 ------------------
# layer {
#   name: "conv4"
#   type: "Convolution"
#   bottom: "conv3"
#   top: "conv4"
#   # learning rate & decay multipliers for the filters
#   param {
#     lr_mult: 1
#     decay_mult: 1
#   }
#   # learning rate & decay multipliers for the biases
#   param {
#     lr_mult: 2
#     decay_mult: 0
#   }
#   convolution_param {
#     num_output: 32
#     kernel_size: 3
#     pad: 1
#     stride: 1
#     weight_filler {
#       # type: "gaussian"
#       # std: 0.01
#       type: "xavier"
#     }
#     bias_filler {
#       type: "constant"
#       value: 0
#     }
#   }
# }
# layer {
#   name: "relu4"
#   type: "ReLU"
#   bottom: "conv4"
#   top: "conv4"
#   relu_param {
#     negative_slope: 0.1818
#   }
# }

#----------------- conv 7 (1x1 filter) ------------------
layer {
  name: "conv7"
  type: "Convolution"
  bottom: "conv2"
  top: "conv7"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 1
    kernel_size: 1
    pad: 0
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
# try with and without
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv7"
  top: "conv7"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- fc 1 ------------------
layer {
  name: "fc1-new"
  type: "InnerProduct"
  bottom: "conv7"
  top: "fc1-new"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 128
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu_fc1"
  type: "ReLU"
  bottom: "fc1-new"
  top: "fc1-new"
  relu_param {
    negative_slope: 0.1818
  }
}
layer {
  name: "drop1"
  type: "Dropout"
  bottom: "fc1-new"
  top: "fc1-new"
  include {
    phase: TRAIN
  }
  dropout_param {
    dropout_ratio: 0.5
  }
}
#----------------- fc 2 ------------------
layer {
  name: "fc2"
  type: "InnerProduct"
  bottom: "fc1-new"
  top: "fc2"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 64
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu_fc2"
  type: "ReLU"
  bottom: "fc2"
  top: "fc2"
  relu_param {
    negative_slope: 0.1818
  }
}
layer {
  name: "drop2"
  type: "Dropout"
  bottom: "fc2"
  top: "fc2"
  include {
    phase: TRAIN
  }
  dropout_param {
    dropout_ratio: 0.5
  }
}
#----------------- score ------------------
layer {
  name: "score"
  type: "InnerProduct"
  bottom: "fc2"
  top: "score"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
#----------------- OUTCOME ------------------
layer {
  name: "prob"
  type: "Softmax"
  bottom: "score"
  top: "prob"
}
