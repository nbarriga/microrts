name: "RTSNet"
layer {
  name: "data"
  type: "Input"
  top: "data"
  input_param { shape: { dim:1 dim:25  dim:16 dim:16 } }
}
#----------------- conv 1 ------------------
layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 2
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 2 ------------------
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "conv1"
  top: "conv2"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 32
    kernel_size: 3
    pad: 0
    stride: 2
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 3 ------------------
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "conv2"
  top: "conv3"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 48
    kernel_size: 2
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 4 ------------------
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 48
    kernel_size: 3
    pad: 0
    stride: 2
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 5 ------------------
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 2
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 6 ------------------
layer {
  name: "conv6"
  type: "Convolution"
  bottom: "conv5"
  top: "conv6"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 0
    stride: 2
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "conv6"
  top: "conv6"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 7 ------------------
layer {
  name: "conv7"
  type: "Convolution"
  bottom: "conv6"
  top: "conv7"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 1
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "conv7"
  top: "conv7"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- conv 8 ------------------
layer {
  name: "conv8"
  type: "Convolution"
  bottom: "conv7"
  top: "conv8"
  # learning rate & decay multipliers for the filters
  param {
    lr_mult: 1
    decay_mult: 1
  }
  # learning rate & decay multipliers for the biases
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 2
    kernel_size: 1
    pad: 1
    stride: 1
    weight_filler {
      # type: "gaussian"
      # std: 0.01
      type: "xavier"
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu8"
  type: "ReLU"
  bottom: "conv8"
  top: "conv8"
  relu_param {
    negative_slope: 0.1818
  }
}
#----------------- score ------------------
layer {
  name: "pool"
  type: "Pooling"
  bottom: "conv8"
  top: "score"
  pooling_param {
    pool: AVE
    global_pooling: true
  }
}

#----------------- OUTCOME ------------------
layer {
  name: "loss"
  type: "Softmax"
  bottom: "score"
  top: "prob"
}
